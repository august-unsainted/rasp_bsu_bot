from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.db_functions import *
from utils.parser import group_validation, find_department
from utils.time_functions import time_validation
from utils.scheduler import add_schedule
from keyboards.edit import back_kb
from keyboards.main_menu import main_kb
from keyboards.registration import reg_day_kb, reg_department_kb

router = Router()


class Register(StatesGroup):
    day = State()
    group = State()
    time = State()
    department = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    if await find_user(message.chat.id):
        await message.answer(
            '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é')
    else:
        await message.answer('–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ üìÜ\n\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Feedback_rasp_bot')
        await state.set_state(Register.day)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', reply_markup=reg_day_kb)


@router.callback_query(F.data.startswith('send'))
async def register_day(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–µ–Ω—å –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    days = {'today': '–°–µ–≥–æ–¥–Ω—è', 'tomorrow': '–ó–∞–≤—Ç—Ä–∞'}
    day = days[callback.data.split('_')[1]]
    if await find_user(callback.message.chat.id):
        update_user(callback.message.chat.id, {'day': day})
        await callback.message.edit_text('–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! '
                                         '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:', reply_markup=back_kb)
        await state.clear()
    else:
        await state.update_data(day=day)
        await callback.message.edit_text('–î–µ–Ω—å –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
        await state.set_state(Register.time)
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00:00)')


@router.message(Register.time)
async def set_time(message: Message, state: FSMContext):
    time = time_validation(message.text)
    if time:
        await state.update_data(time=time)
        user = await find_user(message.chat.id)
        if user:
            await state.clear()
            await update_user(message.chat.id, {"time": time})
            add_schedule(await find_user(message.chat.id))
            await message.answer('–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! '
                                 '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:', reply_markup=back_kb)
        else:
            await state.set_state(Register.group)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 00:00)')


async def end_registration(message: Message, state: FSMContext):
    _id = message.chat.id
    data = await state.get_data()
    await state.clear()
    add_user(_id, data['day'], data["time"], data["group"], data["department"])
    user = await find_user(_id)
    await message.answer(
        f'üëÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—Å:<blockquote>'
        f'üìÖ –î–µ–Ω—å ‚Äî {user["day"]}\n\n'
        f'üïì –í—Ä–µ–º—è ‚Äî {user["time"]}\n\n'
        f'üéì –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã ‚Äî {user["rasp_link"][23:]}\n\n'
        f'üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏–µ ‚Äî {user["department"]}</blockquote>\n\n'
        f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é ‚ò∫Ô∏è', parse_mode='HTML', reply_markup=main_kb)
    add_schedule(user)


@router.message(Register.group)
async def set_group(message: Message, state: FSMContext):
    group = group_validation(message.text)
    if group:
        await state.update_data(group=group)
        if await find_user(message.chat.id):
            data = await state.get_data()
            await state.clear()
            update_user(message.chat.id, {"rasp_link": 'https://bsu.ru/rasp/?g=' + data["group"]})
            await message.answer('–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! '
                                 '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:', reply_markup=back_kb)
        else:
            department = find_department(group)
            if department:
                await state.set_state(Register.department)
                await state.update_data(department=department)
                await end_registration(message, state)
            else:
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', reply_markup=reg_department_kb)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)')


@router.callback_query(F.data.startswith('department'))
async def set_department(callback: CallbackQuery, state: FSMContext):
    message = callback.message
    departments = {'department_full_time': '–î–Ω–µ–≤–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
                   'department_other': '–î—Ä—É–≥–æ–µ'}
    await state.set_state(Register.department)
    await state.update_data(department=departments[callback.data])
    _id = message.chat.id
    if await find_user(_id):
        update_user(_id, {"department": departments[callback.data]})
        await message.edit_text('–û—Ç–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ! '
                                '–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π:', reply_markup=back_kb)
    else:
        await message.edit_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚úÖ')
        await end_registration(message, state)
